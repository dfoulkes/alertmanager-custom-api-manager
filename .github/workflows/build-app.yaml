name: Build & Test Java App

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/test

      - name: Build with Gradle
        run: ./gradlew bootJar # Ensure bootJar is used

      - name: Archive Boot JAR
        uses: actions/upload-artifact@v4
        with:
          name: boot-jar
          path: build/libs/CriticalIssueRestService.jar

  release:
      if: "!contains(github.event.head_commit.message, '[skip ci]')"
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Set up JDK 23
          uses: actions/setup-java@v4
          with:
               java-version: '23'
               distribution: 'temurin'

        - name: Create Release Version
          id: determine_release_version
          run: |
            mkdir ~/.ssh
            echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote set-url origin git@github.com:${{ github.repository }}.git
            if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
              ./gradlew release -Prelease.useAutomaticVersion=true
              VERSION=$(./gradlew -q printVersion)
            fi
            echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: bash

        - name: Upload Problems Report
          if: always() # Ensure it runs even if the build fails
          uses: actions/upload-artifact@v4
          with:
            name: problems-report
            path: build/reports/problems/problems-report.html
  docker:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    needs: release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Supported architectures
        platforms: [linux/arm64, linux/amd64, linux/arm/v8]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Boot JAR
        uses: actions/download-artifact@v4
        with:
            name: boot-jar
            path: build/libs/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CI_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platforms }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/critical-issue-rest-service:latest
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}/critical-issue-rest-service
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}